#!/usr/bin/env bash

apt-list-sources () {
	apt-cache policy "$1" | sed -rn '/^ \*\*\* /{:loop;n;s/^     [- 0-9]{6} //p;tloop}'
}

apt-list-installed () {
	if (( $# > 0 )); then
		grep_args=("$@")
		grep_args=("${grep_args[@]/#/-e\^}")
		grep_args=("${grep_args[@]/%/\$}")
		dpkg-query --list | tail -n +6 | sed -rn 's/^.i..([^ ]*) *.*$/\1/p' | grep -v "${grep_args[@]}"
	else
		dpkg-query --list | tail -n +6 | sed -rn 's/^.i..([^ ]*) *.*$/\1/p'
	fi
}

full=
exclude_sources=()
exclude_packages=()
limit=
progress=
while getopts :fn:Px:X: opt; do
	case "$opt" in
		f)	full=YesPlease;;
		n)	limit="$OPTARG";;
		P)	progress=YesPlease;;
		x)	exclude_sources+=("$OPTARG");;
		X)	exclude_packages+=("$OPTARG");;
		*)	printf 'Unexpected option -%s\n' "$OPTARG" >&2
			return 64  # EX_USAGE
			;;
	esac
done

if [[ "$full" ]]; then
	report_file () {
		local basename="$(basename "$1")"
		echo "${basename//_/\/}:"
		sed 's/^/    /' "$1"
	}
else
	report_file () {
		local basename="$(basename "$1")"
		echo "${basename//_/\/}:"
		local lines="$(wc -l <"$1")"
		if (( lines <= 10 )); then
			sed 's/^/    /' "$1"
		else
			head -n10 "$1" | sed 's/^/    /'
			printf '...and %d other packages\n' "$((lines - 10))"
		fi
	}
fi

tempdir="$(mktemp -d --tmpdir apt-list-unexpected-sources."$$".XXXXX)"
trap 'rm -r -- "$tempdir"' EXIT

count=0
for pkg in $(apt-list-installed "${exclude_packages[@]}"); do
	first_source=
	while read -r line; do
		if [[ -z "$first_source" ]]; then
			first_source="$line"
		fi
	done < <(apt-list-sources "$pkg")

	if [[ "$progress" ]]; then
		printf '.' >&2
	fi

	for exclude in "${exclude_sources[@]}"; do
		if [[ "$first_source" = "$exclude" ]]; then
			continue 2
		fi
	done

	echo "$pkg" >>"$tempdir"/"${first_source//\//_}"

	if [[ "$limit" ]] && (( ++count >= limit )); then
		break
	fi
done

if [[ "$progress" ]]; then
	printf '\n' >&2
fi

for sourcefile in "$tempdir"/*; do
	report_file "$sourcefile"
done

# vim: ft=bash noet ts=8
